// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "Greeter.proto" (package "Greeter", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Greeter } from "./Greeter";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GreetReply } from "./Greeter";
import type { GreetRequest } from "./Greeter";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Defines the service
 *
 * @generated from protobuf service Greeter.Greeter
 */
export interface IGreeterClient {
    /**
     * Function invoked to send the request
     *
     * @generated from protobuf rpc: GetGreeting(Greeter.GreetRequest) returns (Greeter.GreetReply);
     */
    getGreeting(input: GreetRequest, options?: RpcOptions): UnaryCall<GreetRequest, GreetReply>;
}
/**
 * Defines the service
 *
 * @generated from protobuf service Greeter.Greeter
 */
export class GreeterClient implements IGreeterClient, ServiceInfo {
    typeName = Greeter.typeName;
    methods = Greeter.methods;
    options = Greeter.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Function invoked to send the request
     *
     * @generated from protobuf rpc: GetGreeting(Greeter.GreetRequest) returns (Greeter.GreetReply);
     */
    getGreeting(input: GreetRequest, options?: RpcOptions): UnaryCall<GreetRequest, GreetReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GreetRequest, GreetReply>("unary", this._transport, method, opt, input);
    }
}
